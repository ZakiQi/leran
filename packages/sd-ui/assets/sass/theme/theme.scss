/**
 * @description 自定义样式主题，对应不同主题下的样式文件
 */
 @import './linght-theme/linght.scss';
 @import './dark-theme//dark.scss';

/* 定义映射集合 */
$themes: (
  linght-theme: $linght-theme,
  dark-theme: $dark-theme
);


// 滚动条样式
@mixin scrollBarStyle() {
  ::-webkit-scrollbar {
    /*滚动条整体样式*/
    width: 8px; /*高宽分别对应横竖滚动条的尺寸*/
    height: 8px;
  }

  ::-webkit-scrollbar-corner {
    /*滚动条里面轨道交汇处*/
    background: transparent;
  }

  ::-webkit-scrollbar-thumb {
    /*滚动条里面小方块*/
    border-radius: 8px;
    @each $theme-name, $colorValue in $themes {
      [data-theme='#{$theme-name}'] & {
        background-color: map-get($colorValue, 'thumb-color')
      }
    }
  }

  ::-webkit-scrollbar-track {
    /*滚动条里面轨道*/
    box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
    border-radius: 8px;
  }
}


// 设置属性和值（使用主题中的值）
@mixin setAttr($key, $val) {
  @each $theme-name, $colorValue in $themes {
    [data-theme='#{$theme-name}'] & {
      #{$key}: map-get($colorValue, $val)
    }
  }
}

/*
  * 设置属性和值（使用自定义的值）
  * 使用方式
  * @include themeify {
  *     background: themed('border-color');
  * }
*/
@mixin themeify {
  @each $theme-name, $theme-map in $themes {
    //判断html的data-theme的属性值  #{}是sass的插值表达式
    //& sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot
    [data-theme='#{$theme-name}'] & {
      //!global 把局部变量强升为全局变量
      $theme-map: $theme-map !global;

      @content;
    }
  }
}

// 配合themeify方法使用
@function themed($key) {
  @return map-get($theme-map, $key);
}